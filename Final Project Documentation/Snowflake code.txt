-- create databasescreate database if not exists analytics;create database if not exists raw;--create schemascreate schema if not exists analytics.fudgecompanies;create schema if not exists raw.fudgemart_v3;create schema if not exists raw.fudgeflix_v3;-- define file formatscreate or replace file format RAW.PUBLIC.PARQUET     TYPE = parquet    REPLACE_INVALID_CHARACTERS = TRUE;create or replace file format RAW.PUBLIC.JSONARRAY     TYPE = json    STRIP_OUTER_ARRAY = TRUE;create or replace file format RAW.PUBLIC.JSON    TYPE = json    STRIP_OUTER_ARRAY = FALSE;create or replace file format RAW.PUBLIC.CSVHEADER    TYPE = 'csv'    FIELD_DELIMITER  = ','    SKIP_HEADER=1;    create or replace file format RAW.PUBLIC.CSV    TYPE = csv    FIELD_DELIMITER  = ','    PARSE_HEADER = FALSE    SKIP_HEADER  = 0;  -- create stages-- varying file formatsCREATE or replace STAGE RAW.PUBLIC.externalworld_files  URL = 'azure://externalworld.blob.core.windows.net/files/';-- these are all parquet file formatsCREATE or replace STAGE RAW.PUBLIC.externalworld_database  URL = 'azure://externalworld.blob.core.windows.net/database/'  FILE_FORMAT = RAW.PUBLIC.PARQUET ;-- stage the date dimensionCREATE or REPLACE TABLE raw.conformed.datedimension (    datekey int    ,date date    ,datetime timestamp    ,year int    ,quarter int    ,quartername varchar(2)    ,month int    ,monthname varchar(3)    ,day int    ,dayofweek int    ,dayname varchar(3)    ,weekday varchar(1)    ,weekofyear int    ,dayofyear int) AS    WITH CTE_MY_DATE AS (    SELECT DATEADD(DAY, SEQ4(), '2008-01-01 00:00:00') AS MY_DATE    FROM TABLE(GENERATOR(ROWCOUNT=>365*7))    )    SELECT    REPLACE(TO_DATE(MY_DATE)::varchar,'-','')::int  as datekey,    TO_DATE(MY_DATE) as date    ,TO_TIMESTAMP(MY_DATE) as datetime    ,YEAR(MY_DATE) as year    ,QUARTER(MY_DATE) as quarter    ,CONCAT('Q', QUARTER(MY_DATE)::varchar) as quartername    ,MONTH(MY_DATE) as month    ,MONTHNAME(MY_DATE) as monthname    ,DAY(MY_DATE) as day    ,DAYOFWEEK(MY_DATE) as dayofweek    ,DAYNAME(MY_DATE) as dayname    ,case when DAYOFWEEK(MY_DATE) between 1 and 5 then 'Y' else 'N' end as weekday    ,WEEKOFYEAR(MY_DATE) as weekofyear    ,DAYOFYEAR(MY_DATE) as dayofyear    FROM CTE_MY_DATE    ;-- FM PRODUCTScreate or replace table RAW.FUDGEMART_V3.products(    product_id int,    product_department varchar,    product_name varchar,    product_retail_price decimal(18,4),    product_wholesale_price decimal(18,4),    product_is_active varchar,    product_add_date varchar,    product_vendor_id int,    product_description varchar);copy into RAW.fudgemart_v3.products    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_products.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM Shipvia_lookupcreate or replace table RAW.FUDGEMART_V3.shipvia_lookup(    ship_via varchar);copy into RAW.fudgemart_v3.shipvia_lookup    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_shipvia_lookup.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM VENDORScreate or replace table RAW.FUDGEMART_V3.vendors(    vendor_id int,    vendor_name varchar,    vendor_phone varchar,    vendor_website varchar);copy into RAW.FUDGEMART_V3.vendors    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_vendors.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM DEPARTMENTScreate or replace table RAW.FUDGEMART_V3.departments(    department_id varchar);copy into RAW.FUDGEMART_V3.departments    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_departments_lookup.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM CUSTOMERScreate or replace table RAW.FUDGEMART_V3.vendors(    customer_id int,    customer_email varchar,    customer_firstname varchar,    customer_lastname varchar,    customer_address varchar,    customer_city varchar,    customer_state varchar,    customer_zip varchar,    customer_phone varchar,    customer_fax varchar);copy into RAW.FUDGEMART_V3.vendors    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_vendors.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM ORDERScreate or replace table RAW.FUDGEMART_V3.orders(    order_id int,    customer_id int,    order_date varchar,    shipped_date varchar,    ship_via varchar,    creditcard_id int);copy into RAW.FUDGEMART_V3.orders    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_orders.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM ORDERS DETAILS create or replace table RAW.FUDGEMART_V3.order_details(    order_id int,    product_id int,    order_qty int);copy into RAW.FUDGEMART_V3.order_details    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_order_details.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FM CUSTOMERScreate or replace table RAW.FUDGEMART_V3.customers(    customer_id int,    customer_email varchar,    customer_firstname varchar,    customer_lastname varchar,    customer_address varchar,    customer_city varchar,    customer_state varchar,    customer_zip varchar,    customer_phone varchar,    customer_fax varchar);copy into RAW.FUDGEMART_V3.customers    FROM '@RAW.PUBLIC.externalworld_database/fudgemart_v3.fm_customers.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';    -- FF PLANS create or replace table RAW.FUDGEFLIX_V3.plans(    plan_id int,    plan_name varchar,    plan_price decimal(18,2),    plan_current varchar);copy into RAW.FUDGEFLIX_V3.plans    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_plans.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FF accounts create or replace table RAW.FUDGEFLIX_V3.accounts(    account_id int,    account_email varchar,    account_firstname varchar,    account_lastname varchar,    account_address varchar,    account_zipcode varchar,    account_plan_id int,    account_opened_on varchar);copy into RAW.FUDGEFLIX_V3.accounts    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_accounts.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FF account billing create or replace table RAW.FUDGEFLIX_V3.account_billing(    ab_id int,    ab_date varchar,    ab_account_id int,    ab_plan_id int,    ab_billed_amount decimal(18,2));copy into RAW.FUDGEFLIX_V3.account_billing    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_account_billing.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';    -- FF title_genrescreate or replace table RAW.FUDGEFLIX_V3.title_genres(    tg_genre_name varchar,    tg_title_id varchar);copy into RAW.FUDGEFLIX_V3.title_genres    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_title_genres.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';    -- FF genrescreate or replace table RAW.FUDGEFLIX_V3.genres(    genre_name varchar);copy into RAW.FUDGEFLIX_V3.genres    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_genres.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';    -- FF account_titlescreate or replace table RAW.FUDGEFLIX_V3.account_titles(    at_id varchar,    at_account_id varchar,    at_title_id varchar,    at_queue_date varchar,    at_shipped_date varchar,    at_returned_date varchar,    at_rating varchar);copy into RAW.FUDGEFLIX_V3.account_titles    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_account_titles.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';       -- FF titlescreate or replace table RAW.FUDGEFLIX_V3.titles(    title_id varchar,    title_name varchar,    title_type varchar,    title_release_year varchar,    title_rating varchar,    title_bluray_available int);copy into RAW.FUDGEFLIX_V3.titles    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_titles.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';-- FF zipcodescreate or replace table RAW.FUDGEFLIX_V3.zipcodes(    zip_code varchar,    zip_city varchar,    zip_state varchar);copy into RAW.FUDGEFLIX_V3.zipcodes    FROM '@RAW.PUBLIC.externalworld_database/fudgeflix_v3.ff_zipcodes.parquet'     MATCH_BY_COLUMN_NAME='CASE_INSENSITIVE';